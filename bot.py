import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage


from bot_config import TOKEN, owner
import db_config
import keyboards

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç—É
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# States - –∑–∞–º—ñ–Ω–∞ –≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
class SetMsg(StatesGroup):
	msg_text = State()

# –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏
class SendAll(StatesGroup):
	msg_text = State()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    db_config.get_user(message.from_user.id)
    msg = db_config.get_message()
    await message.answer(msg, reply_markup=keyboards.start_kb)

@dp.message_handler(Text(equals=['‚≠êÔ∏è–ê–∫—Ç—É–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è‚≠êÔ∏è']))
async def actual_link(message: types.message):
	await start(message)

# –í—Ö—ñ–¥ –¥–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—ñ
@dp.message_handler(commands=['panel'])
async def panel(message: types.Message):
	if message.from_user.id == owner:
		await message.answer('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ü™Ñ', reply_markup=keyboards.panel_kb)

# –ó–∞–º—ñ–Ω–∞ –≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@dp.message_handler(Text(equals=['üì®–ó–∞–º—ñ–Ω–∏—Ç–∏ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—èüì®']))
async def add_code(message: types.message):
	if message.from_user.id == owner:
		await message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—èüí¨', reply_markup=keyboards.back_kb)
		await SetMsg.msg_text.set()

@dp.message_handler(Text(equals=['‚óÄÔ∏è–ú–µ–Ω—é‚óÄÔ∏è']))
async def back_n_stop(message: types.message):
	await dp.storage.close()
	await dp.storage.wait_closed()
	await message.answer('–í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ –¥—ñ—éü™Ñ', reply_markup=keyboards.panel_kb)

# –ó–∞–º—ñ–Ω–∞ –≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@dp.message_handler(state=SetMsg.msg_text)
async def send_text(message: types.Message, state: FSMContext):
    if(message.text == '‚óÄÔ∏è–ú–µ–Ω—é‚óÄÔ∏è'):
        await back_n_stop(message)
        return
    db_config.set_message(message.text)
    await state.finish()
    await dp.storage.close()
    await dp.storage.wait_closed()
    await message.answer('–í–∏ –∑–∞–º—ñ–Ω–∏–ª–∏ –ø–æ–≤—ñ–¥–æ–≤–ª–µ–Ω–Ω—èü™Ñ', reply_markup=keyboards.panel_kb)

@dp.message_handler(Text(equals=['ü´Ç–ö—ñ–ª—å–∫–∏—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ü´Ç']))
async def users_stat(message: types.message):
    if message.from_user.id == owner:
        msg, users = db_config.get_users()
        await message.answer(msg)


@dp.message_handler(Text(equals=['üì©–ó—Ä–æ–±–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—Éüì©']))
async def send_all(message: types.message):
    if message.from_user.id == owner:
        await message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—èüí¨', reply_markup=keyboards.back_kb)
        await SendAll.msg_text.set()

@dp.message_handler(state=SendAll.msg_text)
async def send_all_message(message: types.Message, state: FSMContext):
    if(message.text == '‚óÄÔ∏è–ú–µ–Ω—é‚óÄÔ∏è'):
        await back_n_stop(message)
        return
    
    msg, users = db_config.get_users()

    #–∞–∫—Ç–∏–≤–Ω—ñ/–Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ —é–∑–µ—Ä–∏
    a_users = 0
    n_users = 0

    for u in users:
        try:
            await bot.send_message(u, message.text)
            a_users += 1
        except:
            n_users += 1

    await state.finish()
    await dp.storage.close()
    await dp.storage.wait_closed()
    await message.answer(f'–†–æ–∑—Å–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ü™Ñ\n\n–í—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {a_users + n_users}\n–ê–∫—Ç–∏–≤–Ω–∏—Ö: {a_users}\n–ù–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö: {n_users}', reply_markup=keyboards.panel_kb)


# ---------------------------
if __name__ == '__main__':
	db_config.database_setup()
	executor.start_polling(dp)